{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/Header.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/pages/About.js","components/pages/NotFound.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","delete","name","email","phone","className","onClick","style","cursor","float","color","bind","to","marginRight","Contacts","Fragment","key","Header","branding","href","defaultProps","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","onSubmit","e","preventDefault","newContact","post","history","push","target","EditContact","updContact","match","params","put","Test","title","body","fetch","then","response","json","App","exact","path","component","About","NotFound","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9e256150.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'DELETE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(contact => \r\n                    contact.id !== action.payload)\r\n            };\r\n        case 'ADD_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: [action.payload, \r\n                ...state.contacts]\r\n            };\r\n        case 'UPDATE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(contact => \r\n                    contact.id === action.payload.id ? (contact\r\n                    = action.payload) : contact)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport class Provider extends Component {\r\n\r\n    state = {\r\n        contacts: [],\r\n        dispatch: action => this.setState(state => \r\n            reducer(this.state, action))\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const res = await axios\r\n        .get('https://jsonplaceholder.typicode.com/users');\r\n\r\n        this.setState({contacts: res.data});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { Consumer } from '../../context';\r\nimport axios from 'axios';\r\n// import './contact.css';\r\n\r\nclass Contact extends Component {\r\n    state = {\r\n        showContactInfo: false\r\n    };\r\n\r\n    onDeleteClick = async (id, dispatch) => {\r\n        try {\r\n            await axios.delete\r\n            (`https://jsonplaceholder.typicode.com/users/${id}`);\r\n            dispatch({ type: 'DELETE_CONTACT', payload: id });\r\n        } catch(e) {\r\n            dispatch({ type: 'DELETE_CONTACT', payload: id });\r\n        }\r\n    };\r\n\r\n    // static propTypes = {\r\n    //     name: PropTypes.string.isRequired,\r\n    //     email: PropTypes.string.isRequired,\r\n    //     phone: PropTypes.string.isRequired\r\n    // }\r\n\r\n    render() {\r\n        const { id, name, email, phone } = this.props.contact;\r\n        const { showContactInfo } = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card card-body mb-3\">\r\n                            <h4>\r\n                                {name}{' '} \r\n                                <i \r\n                                    onClick={() => \r\n                                        this.setState({ showContactInfo: \r\n                                        !this.state.showContactInfo })\r\n                                    }\r\n                                    className=\"fas fa-sort-down\"\r\n                                    style={{ cursor: 'pointer' }}\r\n                                />\r\n                                <i \r\n                                    className=\"fas fa-times\"\r\n                                    style={{ cursor: 'pointer',\r\n                                    float: 'right',\r\n                                    color: 'red' }} \r\n                                    onClick={this.onDeleteClick.bind\r\n                                        (this, id, dispatch)}\r\n                                />\r\n                                <Link to={`contact/edit/${id}`}>\r\n                                    <i \r\n                                        className=\"fas fa-pencil-alt\"\r\n                                        style={{\r\n                                            cursor: 'pointer',\r\n                                            float: 'right',\r\n                                            color: 'black',\r\n                                            marginRight: '1rem'\r\n                                        }}\r\n                                    />\r\n                                </Link>\r\n                                \r\n                            </h4>\r\n                            {showContactInfo ? (<ul className=\"list-group\">\r\n                                <li className=\"list-group-item\">Email: {email}</li>\r\n                                <li className=\"list-group-item\">Phone: {phone}</li>\r\n                            </ul>) : null }\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Contact;","import React, { Component } from 'react';\r\nimport Contact from './Contact';\r\nimport { Consumer } from '../../context';\r\n\r\nclass Contacts extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { contacts } = value;\r\n                    return (\r\n                        <React.Fragment>\r\n                            <h1 className=\"display-4 mb-2\">\r\n                                <span className=\"text-danger\">\r\n                                    Contact\r\n                                </span> List\r\n                            </h1>\r\n                            {contacts.map(contact => (\r\n                                <Contact\r\n                                key={contact.id}\r\n                                contact={contact} \r\n                                />\r\n                             ))}\r\n                        </React.Fragment>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contacts;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = props => {\r\n    const { branding } = props;\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm \r\n        navbar-dark bg-danger mb-3 py-0\">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand\">\r\n                    {branding}\r\n                </a>\r\n                <div>\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\">\r\n                                <i className=\"fas fa-home\" />\r\n                                Home\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/contact/add\" className=\"nav-link\">\r\n                                <i className=\"fas fa-plus\" />\r\n                                Add\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/about\" className=\"nav-link\">\r\n                                <i className=\"fas fa-question\" />\r\n                                About\r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nHeader.defaultProps = {\r\n    branding: 'My App'\r\n};\r\n\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired\r\n};\r\n\r\n// const headingStyle = {\r\n//     color: 'green',\r\n//     fontSize: '50px'\r\n// }\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\nconst TextInputGroup = ({\r\n    label,\r\n    name,\r\n    value,\r\n    placeholder,\r\n    type,\r\n    onChange,\r\n    error\r\n}) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <input\r\n                type={type}\r\n                name={name}\r\n                className={classnames('form-control form-control-lg', {\r\n                    'is-invalid': error\r\n                    \r\n                })}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n            />\r\n            {error && <div className=\"invalid-feedback\">{error}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nTextInputGroup.propTypes = {\r\n    label: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    error: PropTypes.string\r\n};\r\n\r\nTextInputGroup.defaultProps = {\r\n    type: 'text'\r\n};\r\n\r\nexport default TextInputGroup;","import React, { Component } from 'react';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport { v1 as uuid } from 'uuid';\r\nimport axios from 'axios';\r\n\r\nclass AddContact extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    };\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        const { name, email, phone } = this.state;\r\n\r\n        // Check For Errors\r\n        if(name === '') {\r\n            this.setState({errors: { name: 'Name is required' }});\r\n            return;\r\n        }\r\n        \r\n        if(email === '') {\r\n            this.setState({errors: { email: 'Email is required' }});\r\n            return;\r\n        }\r\n        \r\n        if(phone === '') {\r\n            this.setState({errors: { phone: 'Phone is required' }});\r\n            return;\r\n        }\r\n\r\n\r\n        const newContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        };\r\n\r\n        const res = await axios\r\n        .post('https://jsonplaceholder.typicode.com/users',\r\n        newContact);\r\n\r\n        dispatch({ type: 'ADD_CONTACT', payload: res.data });\r\n    \r\n        // Clear State\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n\r\n        this.props.history.push('/');\r\n    };\r\n    \r\n    onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n\r\n    render() {\r\n        const { name, email, phone, errors } = this.state;\r\n        \r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">Add Contact</div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={this.onSubmit.bind\r\n                                (this, dispatch)}>\r\n                                    <TextInputGroup\r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Enter Name\"\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.name}\r\n                                    />\r\n\r\n                                    <TextInputGroup\r\n                                        label=\"Email\"\r\n                                        name=\"email\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter Email\"\r\n                                        value={email}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.email}\r\n                                    />\r\n                                    \r\n                                    <TextInputGroup\r\n                                        label=\"Phone\"\r\n                                        name=\"phone\"\r\n                                        placeholder=\"Enter Phone\"\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.phone}\r\n                                    />\r\n\r\n                                    <input \r\n                                        type=\"submit\" \r\n                                        value=\"Add Contact\" \r\n                                        className=\"btn btn-light btn-block\"\r\n                                    />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddContact;","import React, { Component } from 'react';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport { v1 as uuid } from 'uuid';\r\nimport axios from 'axios';\r\n\r\nclass EditContact extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const { id } = this.props.match.params;\r\n        const res = await axios.get\r\n        (`https://jsonplaceholder.typicode.com/users/${id}`);\r\n\r\n        const contact = res.data;\r\n\r\n        this.setState({\r\n            name: contact.name,\r\n            email: contact.email,\r\n            phone: contact.phone\r\n        });\r\n    }\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        const { name, email, phone } = this.state;\r\n\r\n        // Check For Errors\r\n        if(name === '') {\r\n            this.setState({errors: { name: 'Name is required' }});\r\n            return;\r\n        }\r\n        \r\n        if(email === '') {\r\n            this.setState({errors: { email: 'Email is required' }});\r\n            return;\r\n        }\r\n        \r\n        if(phone === '') {\r\n            this.setState({errors: { phone: 'Phone is required' }});\r\n            return;\r\n        }\r\n\r\n        const updContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n\r\n        const { id } = this.props.match.params;\r\n\r\n        const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updContact);\r\n\r\n        dispatch({ type:'UPDATE_CONTACT', payload: res.data });\r\n        \r\n        // Clear State\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n\r\n        this.props.history.push('/');\r\n    };\r\n    \r\n    onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n\r\n    render() {\r\n        const { name, email, phone, errors } = this.state;\r\n        \r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">Edit Contact</div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={this.onSubmit.bind\r\n                                (this, dispatch)}>\r\n                                    <TextInputGroup\r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Enter Name\"\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.name}\r\n                                    />\r\n\r\n                                    <TextInputGroup\r\n                                        label=\"Email\"\r\n                                        name=\"email\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter Email\"\r\n                                        value={email}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.email}\r\n                                    />\r\n                                    \r\n                                    <TextInputGroup\r\n                                        label=\"Phone\"\r\n                                        name=\"phone\"\r\n                                        placeholder=\"Enter Phone\"\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.phone}\r\n                                    />\r\n\r\n                                    <input \r\n                                        type=\"submit\" \r\n                                        value=\"Update Contact\" \r\n                                        className=\"btn btn-light btn-block\"\r\n                                    />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditContact;","import React from 'react'\r\n\r\nexport default () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">About Contact\r\n            Manager</h1>\r\n            <p className=\"lead\">Simple app to manage\r\n            contacts</p>\r\n            <p className=\"text-secondary\">Version\r\n            1.0.1</p>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nexport default () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">\r\n                <span className=\"text-danger\">404 </span>\r\n                 Page Not Found\r\n            </h1>\r\n            <p className=\"lead\">\r\n                Sorry, that page does not exist\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n","import React, { Component } from 'react'\r\n\r\nclass Test extends Component {\r\n    state = {\r\n        title: '',\r\n        body: ''\r\n    };\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/todos/1')\r\n        .then(response => response.json())\r\n        .then(data => this.setState({\r\n            title: data.title,\r\n            body: data.body\r\n            })\r\n        );\r\n    }\r\n\r\n    // componentWillMount() {\r\n    //     console.log('componentWillMount...');\r\n    // }\r\n    \r\n    // componentDidUpdate() {\r\n    //     console.log('componentDidUpdate...');\r\n    // }\r\n\r\n    // componentWillUpdate() {\r\n    //     console.log('componentWillUpdate...');\r\n    // }\r\n\r\n    // componentWillReceiveProps(nextProps, nextState) {\r\n    //     console.log('componentWillRecieveProps...');\r\n    // }\r\n    \r\n    // static getDerivedStateFromProps(nextProps, prevState) {\r\n    //     return {\r\n    //         test: 'something'\r\n    //     };\r\n    // }\r\n\r\n    // getSnapshotBeforeUpdate(prevProps, prevState) {\r\n    //     console.log('getSnapshotBeforeUpdate...');\r\n    // }\r\n\r\n    render() {\r\n        const { title, body } = this.state;\r\n        return (\r\n            <div>\r\n                <h1>{title}</h1>\r\n                <p>{body}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Test;","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Contacts from './components/contacts/Contacts';\nimport Header from './components/layout/Header';\nimport AddContact from './components/contacts/AddContact'\nimport EditContact from './components/contacts/EditContact'\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\nimport Test from './components/test/Test';\n\nimport { Provider } from './context';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Provider>\n      <Router>\n        <div className=\"App\">\n          <Header branding=\"Contact Manager\" />\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\" component={Contacts} />\n              <Route exact path=\"/contact/add\" component={AddContact} />\n              <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n              <Route exact path=\"/about\" component={About} />\n              <Route exact path=\"/test\" component={Test} />\n              <Route component={NotFound} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}